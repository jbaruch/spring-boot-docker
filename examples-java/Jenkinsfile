#!/usr/bin/env groovy

node ('master') {
    def rtServer
    def buildInfo
    def dockerReg
    def dockerNamespace='jbaruch'
    def dockerFinalTag
    def tagDockerApp
    def rtDocker
    def repoName
    def imageName
    stage('initializing') {
      rtServer = Artifactory.newServer url: SERVER_URL, credentialsId: CREDENTIALS
      rtDocker = Artifactory.docker credentialsId: CREDENTIALS
      git url: 'https://github.com/jbaruch/spring-boot-docker.git'
      dockerFinalTag="${env.BUILD_NUMBER}"
      dockerReg=ARTDOCKER_REGISTRY
      repoName=REPO
    }
    stage('maven build') {
      dir ('examples-java') {
        def rtMaven = Artifactory.newMavenBuild()
        rtMaven.tool = 'mvn'
        rtMaven.resolver server: rtServer, releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot'
        rtMaven.deployer server: rtServer, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
        buildInfo = rtMaven.run pom: './pom.xml', goals: 'clean install -DskipTests'
        buildInfo.env.capture = true
      }
    }
    stage('build helloworld-service docker') {
      imageName='helloworld-service'
      dir ('examples-java/'+imageName) {
        tagDockerApp = dockerReg+'/'+dockerNamespace+'/'+imageName+':'+dockerFinalTag
        docker.build(tagDockerApp)
        rtDocker.push(tagDockerApp, REPO, buildInfo)
        retagLatest(dockerNamespace+'/'+imageName, dockerFinalTag)
      }
    }
    stage('build guestbook-service docker') {
      imageName='guestbook-service'
      dir ('examples-java/'+imageName) {
        tagDockerApp = dockerReg+'/'+dockerNamespace+'/'+imageName+':'+dockerFinalTag
        docker.build(tagDockerApp)
        rtDocker.push(tagDockerApp, REPO, buildInfo)
        retagLatest(dockerNamespace+'/'+imageName, dockerFinalTag)
      }
    }
    stage('build helloworld-ui docker') {
      imageName='helloworld-ui'
      dir ('examples-java/'+imageName) {
        tagDockerApp = dockerReg+'/'+dockerNamespace+'/'+imageName+':'+dockerFinalTag
        docker.build(tagDockerApp)
        rtDocker.push(tagDockerApp, REPO, buildInfo)
        retagLatest(dockerNamespace+'/'+imageName, dockerFinalTag)
      }
    }
    stage('push BuildInfo') {
      rtServer.publishBuildInfo buildInfo
    }	   
}

def retagLatest (imageName, tagStr) {
    sh 'sed -E "s/@/'+tagStr+'/" ../retag.json > retag_out.json'
    def sedImageName = imageName.replace("/","\\/")
    sh 'sed -E "s/#/'+sedImageName+'/" retag_out.json > retaga_out.json'
    sh 'cat retaga_out.json'
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        def curlString = "curl -u " + env.USERNAME + ":" + env.PASSWORD + " " + SERVER_URL
        def regTagStr = curlString +  "/api/docker/"+REPO+"/v2/promote -X POST -H 'Content-Type: application/json' -T retaga_out.json"
        println "Curl String is " + regTagStr
        sh regTagStr
        def fileLoc = imageName+'/latest/manifest.json'
        def updatePropStr = cuurlString + 'api/storage/'+REPO+'/'+fileLoc+'properties=sourceTag='
    }
}
